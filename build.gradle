//  Copyright (c) 2012, J2 Innovations
//  Licensed under the Academic Free License version 3.0
// 
//  History:
//    10 Mar 2016  Richard McElhinney  Creation
//    11 May 2017  Christian Tremblay Update (added tags download)

ext {
  niagaraHome = System.getenv("niagara_home")
  if (niagaraHome == null) {
    logger.error('niagara_home environment variable not set')
  }
}

apply from: "${System.getenv("niagara_home")}/etc/gradle/eclipse.gradle"
apply from: "${System.getenv("niagara_home")}/etc/gradle/idea.gradle"

gradle.beforeProject { p ->
  configure(p) {
    def vendorSettings = file("${rootDir}/vendor.gradle")
    if (vendorSettings.exists()) {
      apply from: vendorSettings
    }
    apply from: "${System.getenv("niagara_home")}/etc/gradle/niagara.gradle"
  }
}

tasks.addRule("""
Pattern: [jar[Test]|clean|<any gradle task>]/[path]: Run a Gradle task against a set of modules rooted at path.
""") { String taskName ->
  def matcher = taskName =~ /(.*?)(Test)?\/(.*)/
  if (matcher) {
    def command = matcher.group(1)
    def includeTestModules = matcher.group(2) == 'Test'
    def path = file("${projectDir}/${matcher.group(3)}").toPath()

    assert path.toFile().exists()
    def targetProjects = subprojects.findAll { it.projectDir.toPath().startsWith(path) }

    // default is build command and build is an alias for Gradle's jar task
    if (command.isEmpty() || command == 'build') { command = 'jar' }

    // Create task for subproject
    task(taskName, dependsOn: targetProjects.tasks[command])
    if (includeTestModules && command == 'jar') {
      tasks[taskName].dependsOn targetProjects.moduleTestJar
    }
  }
}

///////////////////////////////////////////////////////////////////////////
// Download tags from www.project-haystack.org
///////////////////////////////////////////////////////////////////////////

def srcList = [
  'https://project-haystack.org/download/equip-points/ahu',
  'https://project-haystack.org/download/equip-points/boiler',
  'https://project-haystack.org/download/equip-points/chilledWaterPlant',
  'https://project-haystack.org/download/equip-points/chiller',
  'https://project-haystack.org/download/equip-points/coolingTower',
  'https://project-haystack.org/download/equip-points/elecMeter',
  'https://project-haystack.org/download/equip-points/heatExchanger',
  'https://project-haystack.org/download/equip-points/hotWaterPlant',
  'https://project-haystack.org/download/equip-points/steamPlant',
  'https://project-haystack.org/download/equip-points/tank',
  'https://project-haystack.org/download/equip-points/vav',
  'https://project-haystack.org/download/equip-points/vfd',
  'https://project-haystack.org/download/equip-points/zone']

def targetList = [
  new File('nhaystack-rt/src/nhaystack/res/equip-points/ahu.txt'),
  new File('nhaystack-rt/src/nhaystack/res/equip-points/boiler.txt'),
  new File('nhaystack-rt/src/nhaystack/res/equip-points/chilledWaterPlant.txt'),
  new File('nhaystack-rt/src/nhaystack/res/equip-points/chiller.txt'),
  new File('nhaystack-rt/src/nhaystack/res/equip-points/coolingTower.txt'),
  new File('nhaystack-rt/src/nhaystack/res/equip-points/elecMeter.txt'),
  new File('nhaystack-rt/src/nhaystack/res/equip-points/heatExchanger.txt'),
  new File('nhaystack-rt/src/nhaystack/res/equip-points/hotWaterPlant.txt'),
  new File('nhaystack-rt/src/nhaystack/res/equip-points/steamPlant.txt'),
  new File('nhaystack-rt/src/nhaystack/res/equip-points/tank.txt'),
  new File('nhaystack-rt/src/nhaystack/res/equip-points/vav.txt'),
  new File('nhaystack-rt/src/nhaystack/res/equip-points/vfd.txt'),
  new File('nhaystack-rt/src/nhaystack/res/equip-points/zone.txt'),
  ]

task downloadTags (type: FilesDownload) {
  group 'nhaystack'
  srcs = srcList
  targets = targetList
}


def resList = [
  'https://project-haystack.org/download/tags.csv',
  'https://project-haystack.org/download/tz.txt',
  'https://project-haystack.org/download/units.txt']

def resTargetList = [
  new File('nhaystack-rt/src/nhaystack/res/tags.csv'),
  new File('nhaystack-rt/src/nhaystack/res/tz.txt'),
  new File('nhaystack-rt/src/nhaystack/res/units.txt')]

task downloadResources (type: FilesDownload) {
  group 'nhaystack'
  srcs = resList
  targets = resTargetList
}

class FilesDownload extends DefaultTask {

  List<String> srcs
  List<File>   targets

  @TaskAction
  void download() {
    srcs.eachWithIndex { src, index ->
      println "Downloading ${src} to ${targets[index].toString()}"
      ant.get(src: src, dest: targets[index])
    }
  }
}
